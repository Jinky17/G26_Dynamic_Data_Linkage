{"cells":[{"cell_type":"markdown","source":["## This Notebook is created for Testing 100 records datasets with different OCPs (0 - 20 - 40)"],"metadata":{"id":"6ZgZZEwFeWUl"}},{"cell_type":"markdown","metadata":{"id":"Ne-0NhduiJwf"},"source":["## Import all the required packages/libraries "]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5820,"status":"ok","timestamp":1667463793481,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"},"user_tz":-660},"id":"w-qKaZP_4zqC","outputId":"de000759-acb4-496b-9385-7976222579cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting bitarray\n","  Downloading bitarray-2.6.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (235 kB)\n","\u001b[K     |████████████████████████████████| 235 kB 4.1 MB/s \n","\u001b[?25hInstalling collected packages: bitarray\n","Successfully installed bitarray-2.6.0\n","29 30 0.95 0.9201101928374655\n","jesse dobson 0.0 0.275\n","female female 1.0 1.0\n","99 1 0.85 0.8092105263157895\n","99 1 0.0 0.5740181268882175\n"]}],"source":["#reusing the Bloom filter codes\n","!pip install bitarray\n","import BF_encoding\n","import pandas as pd\n","import time \n","\n","from sklearn.cluster import AgglomerativeClustering\n","from scipy.cluster.hierarchy import dendrogram, linkage\n","from statistics import mean\n","from bitarray import bitarray\n","from sklearn.metrics import silhouette_score\n","from matplotlib import pyplot as plt"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"ZtRgJVtMK4NY","executionInfo":{"status":"ok","timestamp":1667463793481,"user_tz":-660,"elapsed":10,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["#initialisng bloom filter object\n","bf_len = 50 #Bloom filter length\n","bf_num_hash_func = 2 #Number of hash functions\n","bf_num_inter = 5 #Number of intervals to use for BF based similarities\n","bf_step = 1 # \n","max_abs_diff = 40 #Maximum absolute difference allowed\n","min_val = 0 #Minimum value\n","max_val = 100 #Maximum value\n","q = 2 #Length of sub-strings/q-grams"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"2WSz22GfK9UW","executionInfo":{"status":"ok","timestamp":1667463793482,"user_tz":-660,"elapsed":10,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["bf = BF_encoding.BF(bf_len, bf_num_hash_func, bf_num_inter, bf_step,\n","          max_abs_diff, min_val, max_val, q)"]},{"cell_type":"markdown","metadata":{"id":"3JOtQId9iGvk"},"source":["------------------------------------------------------------------------------------------------------"]},{"cell_type":"markdown","metadata":{"id":"ret0mJmDyM0l"},"source":["# Loading the first 3 raw 100 records datasets \n"]},{"cell_type":"markdown","source":["### Loading Datasets with 0 OCP"],"metadata":{"id":"R8JShDRj5J4f"}},{"cell_type":"code","execution_count":258,"metadata":{"id":"hMOy__xM6F-x","executionInfo":{"status":"ok","timestamp":1667452435406,"user_tz":-660,"elapsed":7,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["rec_db1 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_0_myp_0_nump_5.csv',True, None)\n","rec_db2 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_0_myp_1_nump_5.csv',True, None)\n","rec_db3 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_0_myp_2_nump_5.csv',True, None)\n","rec_db4 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_0_myp_3_nump_5.csv',True, None)\n","rec_db5 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_0_myp_4_nump_5.csv',True, None)"]},{"cell_type":"markdown","source":["### Loading Datasets with 20 OCP"],"metadata":{"id":"tfsuqZgT5vQ6"}},{"cell_type":"code","source":["rec_db1_20 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_20_myp_0_nump_5.csv',True, None)\n","rec_db2_20 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_20_myp_1_nump_5.csv',True, None)\n","rec_db3_20 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_20_myp_2_nump_5.csv',True, None)\n","rec_db4_20 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_20_myp_3_nump_5.csv',True, None)\n","rec_db5_20 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_20_myp_4_nump_5.csv',True, None)"],"metadata":{"id":"RzH7faUo5QV0","executionInfo":{"status":"ok","timestamp":1667452293489,"user_tz":-660,"elapsed":11,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"execution_count":236,"outputs":[]},{"cell_type":"markdown","source":["### Loading Datasets with 40 OCP"],"metadata":{"id":"DHWEDuFk5wMt"}},{"cell_type":"code","source":["rec_db1_40 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_40_myp_0_nump_5.csv',True, None)\n","rec_db2_40 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_40_myp_1_nump_5.csv',True, None)\n","rec_db3_40 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_40_myp_2_nump_5.csv',True, None)\n","rec_db4_40 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_40_myp_3_nump_5.csv',True, None)\n","rec_db5_40 = bf.__read_csv_file__('ncvr_numrec_100_modrec_2_ocp_40_myp_4_nump_5.csv',True, None)"],"metadata":{"id":"jwHk48Pq5RgN","executionInfo":{"status":"ok","timestamp":1667463796121,"user_tz":-660,"elapsed":5,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"executionInfo":{"elapsed":6,"status":"error","timestamp":1667463796589,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"},"user_tz":-660},"id":"HgCQOPLpxLrJ","outputId":"4f3ad885-62f7-4d93-f9de-3702eb493725"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-a971909b9561>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrec_db1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#check data type of the 1st datasets > it is a dict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'rec_db1' is not defined"]}],"source":["print(type(rec_db1)) #check data type of the 1st datasets > it is a dict"]},{"cell_type":"markdown","metadata":{"id":"hNT9Ml8MiA0O"},"source":["------------------------------------------------------------------------------------------------------"]},{"cell_type":"markdown","metadata":{"id":"nFXp1hr6yVJr"},"source":["# Create bloom filter of the first 5 datasets\n","### -- using pandas as pd\n","### -- create a dictionary that has the combined BF from the 3 datasets - 0 OCP"]},{"cell_type":"code","execution_count":259,"metadata":{"id":"onM4BRlY4-SE","executionInfo":{"status":"ok","timestamp":1667452438446,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["listBF = list() # creating a list to store hashed arrays of first 3 table only\n","dictBF = dict()"]},{"cell_type":"code","execution_count":260,"metadata":{"id":"mVhJeGSPnk6f","executionInfo":{"status":"ok","timestamp":1667452438856,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["# for each record of selected csv file, use BF encoding, combine all the columns into a single array and hash it, and store \n","temp1 = dict()\n","db1 = list()\n","for k, v in rec_db1.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4] \n","  val2_set = [store]\n","  bf1 = bf.set_to_bloom_filter(val2_set)\n","  temp1[v[0]] = bf1 # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf1)\n","  db1.append(1)"]},{"cell_type":"code","execution_count":261,"metadata":{"id":"n0gjNMS6w0Fr","executionInfo":{"status":"ok","timestamp":1667452439262,"user_tz":-660,"elapsed":408,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["temp2 = dict()\n","db2 = list()\n","for k, v in rec_db2.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val2_set = [store]\n","  bf2 = bf.set_to_bloom_filter(val2_set)\n","  temp2[v[0]] = bf2 # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf2)\n","  db2.append(2)"]},{"cell_type":"code","execution_count":262,"metadata":{"id":"b1KnUa8dw0by","executionInfo":{"status":"ok","timestamp":1667452439262,"user_tz":-660,"elapsed":4,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["temp3 = dict()\n","db3 = list()\n","for k, v in rec_db3.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val3_set = [store]\n","  bf3 = bf.set_to_bloom_filter(val3_set)\n","  temp3[v[0]] = bf3  # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf3)\n","  db3.append(3)"]},{"cell_type":"code","execution_count":263,"metadata":{"id":"0sEMd_HXCcS6","executionInfo":{"status":"ok","timestamp":1667452439630,"user_tz":-660,"elapsed":1,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["temp4 = dict()\n","db4 = list()\n","for k, v in rec_db4.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val4_set = [store]\n","  bf4 = bf.set_to_bloom_filter(val4_set)\n","  temp4[v[0]] = bf4  # append it into a dafarame instead of disctionary ??\n","  db4.append(4)"]},{"cell_type":"code","execution_count":264,"metadata":{"id":"AnWiH_mJCv_0","executionInfo":{"status":"ok","timestamp":1667452440075,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["temp5 = dict() \n","db5 = list()\n","for k, v in rec_db5.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val5_set = [store]\n","  bf5 = bf.set_to_bloom_filter(val5_set)\n","  temp5[v[0]] = bf5  # append it into a dafarame instead of disctionary ??\n","  db5.append(5)"]},{"cell_type":"markdown","source":["### Encoding datasets with 20 OCP"],"metadata":{"id":"AFgPSPOgComy"}},{"cell_type":"code","source":["listBF = list() # creating a list to store hashed arrays of first 3 table only\n","dictBF = dict()"],"metadata":{"id":"eTbRb3YKC2s4","executionInfo":{"status":"ok","timestamp":1667452295549,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"execution_count":237,"outputs":[]},{"cell_type":"code","execution_count":238,"metadata":{"id":"9T3TGTCtChmF","executionInfo":{"status":"ok","timestamp":1667452295549,"user_tz":-660,"elapsed":1,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["# for each record of selected csv file, use BF encoding, combine all the columns into a single array and hash it, and store \n","temp1 = dict()\n","db1 = list()\n","for k, v in rec_db1_20.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4] \n","  val2_set = [store]\n","  bf1 = bf.set_to_bloom_filter(val2_set)\n","  temp1[v[0]] = bf1 # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf1)\n","  db1.append(1)"]},{"cell_type":"code","execution_count":239,"metadata":{"id":"iEWLqseeChmF","executionInfo":{"status":"ok","timestamp":1667452295886,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["temp2 = dict()\n","db2 = list()\n","for k, v in rec_db2_20.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val2_set = [store]\n","  bf2 = bf.set_to_bloom_filter(val2_set)\n","  temp2[v[0]] = bf2 # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf2)\n","  db2.append(2)"]},{"cell_type":"code","execution_count":240,"metadata":{"id":"4E19FeI0ChmG","executionInfo":{"status":"ok","timestamp":1667452295886,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["temp3 = dict()\n","db3 = list()\n","for k, v in rec_db3_20.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val3_set = [store]\n","  bf3 = bf.set_to_bloom_filter(val3_set)\n","  temp3[v[0]] = bf3  # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf3)\n","  db3.append(3)"]},{"cell_type":"code","execution_count":241,"metadata":{"id":"1Z2KsT58ChmG","executionInfo":{"status":"ok","timestamp":1667452296517,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["\n","temp4 = dict()\n","db4 = list()\n","for k, v in rec_db4_20.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val4_set = [store]\n","  bf4 = bf.set_to_bloom_filter(val4_set)\n","  temp4[v[0]] = bf4  # append it into a dafarame instead of disctionary ??\n","  db4.append(4)"]},{"cell_type":"code","execution_count":242,"metadata":{"id":"w8OZJnyIChmG","executionInfo":{"status":"ok","timestamp":1667452296978,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["temp5 = dict() \n","db5 = list()\n","for k, v in rec_db5_20.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val5_set = [store]\n","  bf5 = bf.set_to_bloom_filter(val5_set)\n","  temp5[v[0]] = bf5  # append it into a dafarame instead of disctionary ??\n","  db5.append(5)"]},{"cell_type":"code","source":[],"metadata":{"id":"sUOd91sOoQ-k"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Encoding datasets with 40 OCP"],"metadata":{"id":"KB3OYQ3huRsv"}},{"cell_type":"code","source":["listBF = list() # creating a list to store hashed arrays of first 3 table only\n","dictBF = dict()"],"metadata":{"executionInfo":{"status":"ok","timestamp":1667463807819,"user_tz":-660,"elapsed":892,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"id":"pORR9i_loREU"},"execution_count":6,"outputs":[]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"status":"ok","timestamp":1667463808273,"user_tz":-660,"elapsed":5,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"id":"mWQX4g8IoREU"},"outputs":[],"source":["# for each record of selected csv file, use BF encoding, combine all the columns into a single array and hash it, and store \n","temp1 = dict()\n","db1 = list()\n","for k, v in rec_db1_40.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4] \n","  val2_set = [store]\n","  bf1 = bf.set_to_bloom_filter(val2_set)\n","  temp1[v[0]] = bf1 # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf1)\n","  db1.append(1)"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"status":"ok","timestamp":1667463808274,"user_tz":-660,"elapsed":5,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"id":"Nnq04PJWoREU"},"outputs":[],"source":["temp2 = dict()\n","db2 = list()\n","for k, v in rec_db2_40.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val2_set = [store]\n","  bf2 = bf.set_to_bloom_filter(val2_set)\n","  temp2[v[0]] = bf2 # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf2)\n","  db2.append(2)"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"status":"ok","timestamp":1667463808274,"user_tz":-660,"elapsed":5,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"id":"zx-fPCfEoREU"},"outputs":[],"source":["temp3 = dict()\n","db3 = list()\n","for k, v in rec_db3_40.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val3_set = [store]\n","  bf3 = bf.set_to_bloom_filter(val3_set)\n","  temp3[v[0]] = bf3  # append it into a dafarame instead of disctionary ??\n","  listBF.append(bf3)\n","  db3.append(3)"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"status":"ok","timestamp":1667463808275,"user_tz":-660,"elapsed":5,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"id":"ia3mE8YDoREU"},"outputs":[],"source":["\n","temp4 = dict()\n","db4 = list()\n","for k, v in rec_db4_40.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val4_set = [store]\n","  bf4 = bf.set_to_bloom_filter(val4_set)\n","  temp4[v[0]] = bf4  # append it into a dafarame instead of disctionary ??\n","  db4.append(4)"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"status":"ok","timestamp":1667463808747,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"id":"xkFP2RosoREU"},"outputs":[],"source":["temp5 = dict() \n","db5 = list()\n","for k, v in rec_db5_40.items():\n","  store = v[1]+ v[2]+ v[3]+ v[4]\n","  val5_set = [store]\n","  bf5 = bf.set_to_bloom_filter(val5_set)\n","  temp5[v[0]] = bf5  # append it into a dafarame instead of disctionary ??\n","  db5.append(5)"]},{"cell_type":"markdown","metadata":{"id":"XIi6WCnqh6Lg"},"source":["--------------------------------------------------------------------------------"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"qmwHisoopy0M","executionInfo":{"status":"ok","timestamp":1667463809926,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["header = ['rec_id', 'Blooom_filters']\n","df1 = pd.DataFrame(temp1.items(), columns= header)\n","df1[\"database_id\"] = db1 #adding the database id\n","df1 = df1[['rec_id', \"database_id\",'Blooom_filters']] # rearrange the dataframe based on colunms"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"nyGFF2wup-4r","executionInfo":{"status":"ok","timestamp":1667463810757,"user_tz":-660,"elapsed":3,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["df2 = pd.DataFrame(temp2.items(), columns= header)\n","df2[\"database_id\"] = db2 \n","df2 = df2[['rec_id', \"database_id\",'Blooom_filters']]"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"tGiDojzht9Dt","executionInfo":{"status":"ok","timestamp":1667463810757,"user_tz":-660,"elapsed":2,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["df3 = pd.DataFrame(temp3.items(), columns= header) \n","df3[\"database_id\"] = db3 \n","df3 = df3[['rec_id', \"database_id\",'Blooom_filters']]"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"VDtSs40aDASg","executionInfo":{"status":"ok","timestamp":1667463810758,"user_tz":-660,"elapsed":3,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["df4 = pd.DataFrame(temp4.items(), columns= header) \n","df4[\"database_id\"] = db4 \n","df4 = df4[['rec_id', \"database_id\",'Blooom_filters']]"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"5WqJ_k_LDApM","executionInfo":{"status":"ok","timestamp":1667463811291,"user_tz":-660,"elapsed":9,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["df5 = pd.DataFrame(temp5.items(), columns= header) \n","df5[\"database_id\"] = db5\n","df5 = df5[['rec_id', \"database_id\",'Blooom_filters']]"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1667463811291,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"},"user_tz":-660},"id":"qWUg682gCwwJ","outputId":"3629d57e-15af-4df9-8788-c25d971c8be8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     rec_id  database_id                                     Blooom_filters\n","0  06755315            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...\n","1  03370376            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...\n","2  00406646            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","3  04381862            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","4  02347140            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..."],"text/html":["\n","  <div id=\"df-6eb7a365-85f5-41f2-bcce-49662e99d792\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rec_id</th>\n","      <th>database_id</th>\n","      <th>Blooom_filters</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>06755315</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>03370376</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>00406646</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>04381862</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>02347140</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6eb7a365-85f5-41f2-bcce-49662e99d792')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6eb7a365-85f5-41f2-bcce-49662e99d792 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6eb7a365-85f5-41f2-bcce-49662e99d792');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":17}],"source":["First3Table = pd.concat([df1, df2, df3])\n","First3Table.head()"]},{"cell_type":"code","source":["First3Table.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"8LM83R-r-yD2","executionInfo":{"status":"ok","timestamp":1667463811292,"user_tz":-660,"elapsed":8,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"outputId":"134885b7-5ea2-4e13-c1b2-52b7767a01c6"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      rec_id  database_id                                     Blooom_filters\n","95  05125467            3  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, ...\n","96  02425955            3  [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","97  03331940            3  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","98  02158195            3  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","99  08195071            3  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, ..."],"text/html":["\n","  <div id=\"df-535b1101-7b02-4099-a6f2-2720e12bd8e7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rec_id</th>\n","      <th>database_id</th>\n","      <th>Blooom_filters</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>95</th>\n","      <td>05125467</td>\n","      <td>3</td>\n","      <td>[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>02425955</td>\n","      <td>3</td>\n","      <td>[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>03331940</td>\n","      <td>3</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>02158195</td>\n","      <td>3</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>08195071</td>\n","      <td>3</td>\n","      <td>[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-535b1101-7b02-4099-a6f2-2720e12bd8e7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-535b1101-7b02-4099-a6f2-2720e12bd8e7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-535b1101-7b02-4099-a6f2-2720e12bd8e7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"sMB2YyYQz4N5"},"source":["# Clustering - 40 OCP errors in the datasets"]},{"cell_type":"code","source":["len(First3Table) #checking length of the first 3 tables"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WQM-JgOV-0UI","executionInfo":{"status":"ok","timestamp":1667463812253,"user_tz":-660,"elapsed":7,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"outputId":"c5c4a290-6a32-463d-e11d-5384ac8b7340"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["300"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["start_time = time.time()\n","counter = -1     ## fix it \n","counter_clus = 0\n","num_clusters = 2\n","for i in range(len(First3Table)):\n","  Maincluster = AgglomerativeClustering(n_clusters = num_clusters).fit(listBF) # 50 is optimal number of clusters \n","  evaluation = silhouette_score(listBF, Maincluster.labels_)\n","  if evaluation > counter:\n","    counter = evaluation\n","    counter_clus = num_clusters\n","  num_clusters += 1\n","  if num_clusters == len(First3Table)-1:\n","    break\n","print('coefficient =', counter , \", \",  'the optimal number of cluster = ', counter_clus) # optimal number of cluster and percentage\n","print(\"--- time taken = %s seconds ---\" % (time.time() - start_time))"],"metadata":{"id":"q3w0Fz4AKFTE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667463818880,"user_tz":-660,"elapsed":6189,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"outputId":"e75849c8-f42f-4456-d8ca-8cb6855c4998"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["coefficient = 0.5877430228813401 ,  the optimal number of cluster =  59\n","--- time taken = 6.122396945953369 seconds ---\n"]}]},{"cell_type":"code","execution_count":253,"metadata":{"id":"CpFPMpKoDunI","executionInfo":{"status":"ok","timestamp":1667452386609,"user_tz":-660,"elapsed":290,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}}},"outputs":[],"source":["DMaincluster = AgglomerativeClustering(n_clusters = 155).fit(listBF)"]},{"cell_type":"code","source":["silhouette_score(listBF, Maincluster.labels_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xHZCIBMcw2sr","executionInfo":{"status":"ok","timestamp":1667449775407,"user_tz":-660,"elapsed":20,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"}},"outputId":"0b42bdf1-7272-4036-9216-febf7156f2d7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3862641337102947"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["len(Maincluster.labels_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GwwUYwGP_cnO","executionInfo":{"status":"ok","timestamp":1667449775889,"user_tz":-660,"elapsed":4,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"}},"outputId":"a5fc9db7-2f85-4c7a-dbbe-4c0a66812efb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["300"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RywdF7B7g2J-"},"outputs":[],"source":["Maincluster.labels_[:300].sort() # sorting clusterd id in ascending order  so that we can see how many of each BF belongs to which cluster_id "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":302,"status":"ok","timestamp":1667449504877,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"},"user_tz":-660},"id":"HR2qKHIOsaoX","outputId":"6674b684-6985-450c-c304-6125b7a687b1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   cluster_id                                                 BF\n","0           0  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","1           0  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...\n","2           0  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...\n","3           0  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...\n","4           0  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, ..."],"text/html":["\n","  <div id=\"df-c9cbe27f-84a0-46e2-a7a5-01d8e6321c97\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cluster_id</th>\n","      <th>BF</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9cbe27f-84a0-46e2-a7a5-01d8e6321c97')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c9cbe27f-84a0-46e2-a7a5-01d8e6321c97 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c9cbe27f-84a0-46e2-a7a5-01d8e6321c97');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":60}],"source":["cluster_map = pd.DataFrame() ## n_clusters = 1274 , n_clusters = 155 for testing purposes\n","cluster_map['cluster_id'] = Maincluster.labels_\n","cluster_map['BF'] = listBF\n","cluster_map.head() # bloomFilter and it cluster\n"]},{"cell_type":"code","source":["cluster_map.tail() # bloomFilter and it cluster"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"hTSfpFf2GGM_","executionInfo":{"status":"ok","timestamp":1667449506533,"user_tz":-660,"elapsed":308,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"}},"outputId":"56bd43de-1301-4eac-9de4-a9d6824deea6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     cluster_id                                                 BF\n","295         152  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","296         152  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","297         153  [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, ...\n","298         154  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...\n","299         154  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..."],"text/html":["\n","  <div id=\"df-9e21efcd-14b4-43a6-90fd-35c6480c3384\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cluster_id</th>\n","      <th>BF</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>295</th>\n","      <td>152</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>296</th>\n","      <td>152</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>297</th>\n","      <td>153</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>298</th>\n","      <td>154</td>\n","      <td>[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>299</th>\n","      <td>154</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e21efcd-14b4-43a6-90fd-35c6480c3384')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9e21efcd-14b4-43a6-90fd-35c6480c3384 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9e21efcd-14b4-43a6-90fd-35c6480c3384');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["import scipy.cluster.hierarchy as shc\n","start_time = time.time()\n","\n","\n","plt.figure(figsize=(10, 7))  \n","plt.title(\"Dendrograms\")  \n","dend = shc.dendrogram(shc.linkage(listBF, method='ward'))\n","\n","print(\"--- time taken for Dendrograms = %s seconds ---\" % (time.time() - start_time))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":462},"id":"oW1ke9kNwAx2","executionInfo":{"status":"ok","timestamp":1667449517657,"user_tz":-660,"elapsed":10121,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"}},"outputId":"fe9efa79-57f6-4fc6-bf64-41d33626f24e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- time taken for Dendrograms = 0.4544408321380615 seconds ---\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"xyBAFE28f1nb"},"source":["# Use SQL database to store the dataframe generated by the first 3 csv records  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gn2dqCeNxv86"},"outputs":[],"source":["` #rslt_df #checking cluster "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1DOcG_28hutV"},"outputs":[],"source":["# import packages for a SQL server\n","#import numpy as np  \n","#import sqlite3 #\n","#from sqlalchemy import create_engine "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EMGh16wHVIyI"},"outputs":[],"source":["# Using SQL = Pandas uses memory and will hold dataframes in RAM.\n","# The maximum storage will be equal to RAM.\n","# SQL on the other hand uses storage to store data.\n","# Use \n","\n","#1. save the clustered data to a SQL database\n","#2. save more incoming data to clustered database\n","#3. make a class solution where you can dynamically store and process these values"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"scY0erEzfzis"},"outputs":[],"source":["# cav_database = create-engine\n","# create a connector to a database \n"]},{"cell_type":"markdown","metadata":{"id":"YfKW8hR0zSGZ"},"source":["# Data Linkage"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ndlYuXjpzXUO"},"outputs":[],"source":["# finding an efficient way to link the new record (from 4 and 5 ) to the existing cluster"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L6aeRfjQk0LQ"},"outputs":[],"source":["#first method\n","#The code below aims to get the average of all binary record for each cluster id.(using binary addition and division) \n","\n","max = cluster_map.iloc[len(cluster_map)-1, 0]\n","listexp = list()\n","loop = 0\n","averages = dict()\n","for i in range(max): \n","  for j in range(len(cluster_map)): #loop through the cluster_map table\n","      if cluster_map.iloc[j, 0] == loop: #identify a single cluster id and store it binary record in a temporary list\n","        listexp.append(cluster_map.iloc[j, 1])\n","  sum = \"0\"\n","  div = 0\n","  for k in range(len(listexp)): #loop through the list created\n","    flow = listexp[k].to01()\n","    sum = bin(int(sum, 2) + int(flow, 2)) # add all binary record in that list \n","    div += 1\n","    num = int(sum, 2) # devide the sum to get the average for each cluster id\n","  ans = bin(int(num/div))\n","  averages[loop] = ans[2:]\n","  loop += 1"]},{"cell_type":"markdown","metadata":{"id":"WXqOrsU67sjC"},"source":["# Dynamic Update - 4th and 5th datasets into the clusters\n"]},{"cell_type":"code","execution_count":224,"metadata":{"id":"9X8kXlzjeuwk","executionInfo":{"status":"error","timestamp":1667451906403,"user_tz":-660,"elapsed":3,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"colab":{"base_uri":"https://localhost:8080/","height":235},"outputId":"402c8763-ced3-430e-e195-830870485a81"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-224-1da2bd058c1a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m   \u001b[0mbf4\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_to_bloom_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval4_set\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m# attain bloom filter for each record\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0;31m#the next stage is used to balance the length of each bloom filter from the averages list.(when getting the average the length of the bloom filter changes)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m   \u001b[0;32mfor\u001b[0m \u001b[0mk1\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maverages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0mstore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbitarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maverages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maverages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbf4\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'averages' is not defined"]}],"source":["# the code below aim to find the best cluster id for incoming record from 4th csv file.  //////// Mean vector should have the same length //////// list of values, \n","\n","keep = 0\n","score = 0\n","for k, v in rec_db4.items(): # loop through the row of 4th csv file for each record\n","  store = v[0]+ v[1]+ v[2]+ v[3]\n","  val4_set = [store]\n","  bf4 = bf.set_to_bloom_filter(val4_set)# attain bloom filter for each record\n","  #the next stage is used to balance the length of each bloom filter from the averages list.(when getting the average the length of the bloom filter changes)\n","  for k1 in averages.keys():\n","    store = bitarray(averages[k1])\n","    if len(averages[k1]) - len(bf4) > 0:\n","      for j in range(len(averages[k1]) - len(bf4)):\n","        bf4[:0] = bitarray(\"0\")\n","    else:\n","      if len(bf4) - len(averages[k1]) > 0:\n","        for i in range(len(bf4) - len(averages[k1])):\n","          store[:0] = bitarray(\"0\")\n","# for each record from 4th csv file, compare the similarity with each cluster average to the get the optimal cluster it belongs to.       \n","    if bf.calc_bf_sim(bf4,store) >= score:\n","      keep = k1\n","      store = bitarray(averages[k1])\n","  cluster_map.loc[len(cluster_map)+1] = [keep, bf4] #add the new record to the cluster map table "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KwzkbJPkD4hR"},"outputs":[],"source":["# the code is as similar to the one above, but for the 5th table\n","keep = 0\n","score = 0\n","for k, v in rec_db5.items():\n","  store = v[0]+ v[1]+ v[2]+ v[3]\n","  val5_set = [store]\n","  bf5 = bf.set_to_bloom_filter(val5_set)\n","  for k1 in averages.keys():\n","    store = bitarray(averages[k1])\n","    if len(averages[k1]) - len(bf5) > 0:\n","      for j in range(len(averages[k1]) - len(bf5)):\n","        bf5[:0] = bitarray(\"0\")\n","    else:\n","      if len(bf5) - len(averages[k1]) > 0:\n","        for i in range(len(bf5) - len(averages[k1])):\n","          store[:0] = bitarray(\"0\")\n","    if bf.calc_bf_sim(bf5,store) >= score:\n","      keep = k1\n","      store = bitarray(averages[k1])\n","  cluster_map.loc[len(cluster_map)+1] = [keep, bf5]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1667449524364,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"},"user_tz":-660},"id":"HIKxmiQ8f-JC","outputId":"c0f5871a-0438-490e-9d99-abbf08f3c71d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["500"]},"metadata":{},"execution_count":66}],"source":["len(cluster_map)"]},{"cell_type":"markdown","metadata":{"id":"rm-B5auz-Ik2"},"source":["# The next and final step \n","##### Connect the cluster map table to the other table with the record id. To produce the final cvs file (result)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1667449524368,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"},"user_tz":-660},"id":"Nc6-OPSqCRuo","outputId":"5364ff1e-79a3-42b1-e1cb-9dd5dfda96ab"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["500"]},"metadata":{},"execution_count":67}],"source":["df_all_rows = pd.concat([df1, df2, df3, df4, df5]) # \n","len(df_all_rows)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HP2aTht2EoXW"},"outputs":[],"source":["cluster_col = cluster_map.cluster_id.values.tolist()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1667449524376,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"},"user_tz":-660},"id":"UgbqFJWWDmrx","outputId":"5e47ab6f-96ed-4ba2-981f-4e2ca904171b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    rec_id  database_id                                     Blooom_filters  \\\n","0  7546882            1  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","1  3274759            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...   \n","2  4597785            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...   \n","3  4616218            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...   \n","4  2832413            1  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","5  8183846            1  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","6  6608939            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, ...   \n","7  2222125            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","8  5789746            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","9  1148995            1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","\n","   cluster_id  \n","0           0  \n","1           0  \n","2           0  \n","3           0  \n","4           0  \n","5           0  \n","6           1  \n","7           1  \n","8           1  \n","9           1  "],"text/html":["\n","  <div id=\"df-6ef3fd8a-b65d-41e4-9760-f99054c17cdb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rec_id</th>\n","      <th>database_id</th>\n","      <th>Blooom_filters</th>\n","      <th>cluster_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7546882</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3274759</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4597785</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4616218</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2832413</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>8183846</td>\n","      <td>1</td>\n","      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6608939</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2222125</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>5789746</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1148995</td>\n","      <td>1</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ef3fd8a-b65d-41e4-9760-f99054c17cdb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6ef3fd8a-b65d-41e4-9760-f99054c17cdb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6ef3fd8a-b65d-41e4-9760-f99054c17cdb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":69}],"source":["df_all_rows[\"cluster_id\"] = cluster_col #//////grand total should have same clusterid with different database_id /// each cluster should have same rec_id, the cluster we have now is not pure \n","df_all_rows.head(10)\n"]},{"cell_type":"code","source":["df_all_rows.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"aJjURgSlpONY","executionInfo":{"status":"ok","timestamp":1667449524377,"user_tz":-660,"elapsed":30,"user":{"displayName":"Jinjia Bai","userId":"04487049179225043528"}},"outputId":"7247805d-6ca0-47cd-da04-6878bf1d5b77"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     rec_id  database_id                                     Blooom_filters  \\\n","95  4590505            5  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","96  2548666            5  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n","97  6949828            5  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, ...   \n","98   199634            5  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n","99  5483476            5  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n","\n","    cluster_id  \n","95         153  \n","96         153  \n","97         153  \n","98         153  \n","99         153  "],"text/html":["\n","  <div id=\"df-d1bd5116-9b1f-4df5-a636-f49e3f8ec851\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rec_id</th>\n","      <th>database_id</th>\n","      <th>Blooom_filters</th>\n","      <th>cluster_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>95</th>\n","      <td>4590505</td>\n","      <td>5</td>\n","      <td>[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>153</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>2548666</td>\n","      <td>5</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n","      <td>153</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>6949828</td>\n","      <td>5</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>153</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>199634</td>\n","      <td>5</td>\n","      <td>[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n","      <td>153</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>5483476</td>\n","      <td>5</td>\n","      <td>[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n","      <td>153</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1bd5116-9b1f-4df5-a636-f49e3f8ec851')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d1bd5116-9b1f-4df5-a636-f49e3f8ec851 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d1bd5116-9b1f-4df5-a636-f49e3f8ec851');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":70}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0u1S8OWHDeZD"},"outputs":[],"source":["df_all_rows.to_csv('Final_result.csv', index=False)"]},{"cell_type":"markdown","metadata":{"id":"zDx815iKvIbu"},"source":["# Testing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"E8OYiT6sFT-u"},"outputs":[],"source":["og_tab1 = pd.read_csv('ncvr_numrec_100_modrec_2_ocp_0_myp_0_nump_5.csv')\n","og_tab2 = pd.read_csv('ncvr_numrec_100_modrec_2_ocp_0_myp_1_nump_5.csv')\n","og_tab3 = pd.read_csv('ncvr_numrec_100_modrec_2_ocp_0_myp_2_nump_5.csv')\n","og_tab4 = pd.read_csv('ncvr_numrec_100_modrec_2_ocp_0_myp_3_nump_5.csv')\n","og_tab5 = pd.read_csv('ncvr_numrec_100_modrec_2_ocp_0_myp_4_nump_5.csv')"]},{"cell_type":"code","source":["def remove_name(og_tab0): # a function remove_name() will rename the wrong columns allocation to the proper names and drop unnecessary columns\n","  og_tab0.rename(columns = {'voter_reg_num':'First Name', \n","                          'name_prefix':'Last Name', \n","                          'first_name': 'City', \n","                          'middle_name': 'Post Code'}, inplace = True) ## Fixing name errors of original datasets \n","\n","  og_tab0.drop(og_tab0.columns[[range(5, 19)]], axis=1, inplace=True) ## dropping unnecessary columns from index: 5 to 19 "],"metadata":{"id":"GeE9JehO9cAE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["remove_name(og_tab0)\n","remove_name(og_tab1)\n","remove_name(og_tab2)\n","remove_name(og_tab3)\n","remove_name(og_tab4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":453},"id":"sNo0oa1TH1aR","executionInfo":{"status":"error","timestamp":1667137004424,"user_tz":-660,"elapsed":5,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"outputId":"6592b867-f514-4844-ef94-191cbab43dbb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py:4616: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n","  result = getitem(key)\n"]},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-53-74ad688bf487>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mremove_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mog_tab0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mremove_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mog_tab1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mremove_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mog_tab2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mremove_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mog_tab3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mremove_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mog_tab4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-52-4c27a558f22e>\u001b[0m in \u001b[0;36mremove_name\u001b[0;34m(og_tab0)\u001b[0m\n\u001b[1;32m      5\u001b[0m                           'middle_name': 'Post Code'}, inplace = True) ## Fixing name errors of original datasets \n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m   \u001b[0mog_tab0\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mog_tab0\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m19\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m## dropping unnecessary columns from index: 5 to 19\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4614\u001b[0m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbool\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4615\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4616\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4617\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4618\u001b[0m             \u001b[0;31m# error: Argument 1 to \"ndim\" has incompatible type \"Union[ExtensionArray,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 5 is out of bounds for axis 0 with size 5"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1667137004984,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"},"user_tz":-660},"id":"JUJYhz37JwIT","outputId":"91a294ab-a934-4233-f021-5d904cf8ba68"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    rec_id First Name        Last Name          City  Post Code\n","0  6978370  graziella  gambale-marengi       raleigh      27617\n","1  2347140        kia        mccormick       raleigh      27603\n","2  3370376  elizabeth         phillips  robbinsville      28771\n","3  7621378    sherlyn           penado      gastonia      28056\n","4   216852     vernon            smith        durham      27704"],"text/html":["\n","  <div id=\"df-4939a179-5788-4417-8604-64fbd610c02e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rec_id</th>\n","      <th>First Name</th>\n","      <th>Last Name</th>\n","      <th>City</th>\n","      <th>Post Code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6978370</td>\n","      <td>graziella</td>\n","      <td>gambale-marengi</td>\n","      <td>raleigh</td>\n","      <td>27617</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2347140</td>\n","      <td>kia</td>\n","      <td>mccormick</td>\n","      <td>raleigh</td>\n","      <td>27603</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3370376</td>\n","      <td>elizabeth</td>\n","      <td>phillips</td>\n","      <td>robbinsville</td>\n","      <td>28771</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7621378</td>\n","      <td>sherlyn</td>\n","      <td>penado</td>\n","      <td>gastonia</td>\n","      <td>28056</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>216852</td>\n","      <td>vernon</td>\n","      <td>smith</td>\n","      <td>durham</td>\n","      <td>27704</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4939a179-5788-4417-8604-64fbd610c02e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4939a179-5788-4417-8604-64fbd610c02e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4939a179-5788-4417-8604-64fbd610c02e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":54}],"source":["og_tab0.head()"]},{"cell_type":"code","source":["  og_tab2.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"Yx6pWW6nAYeL","executionInfo":{"status":"ok","timestamp":1667137005447,"user_tz":-660,"elapsed":4,"user":{"displayName":"Kairi Kurachi","userId":"01373093198210756571"}},"outputId":"ca5f24d9-eda3-4424-e05e-6a55d0e465e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    rec_id voter_reg_num name_prefix   first_name  middle_name  last_name  \\\n","0  4489635         diana   libberton       hubert        28539        NaN   \n","1  3597241        lillie    sullivan      raleigh        27606        NaN   \n","2  7621378       sherlyn      penado     gastonia        28056        NaN   \n","3  5029442       theresa       moore  chocowinity        27817        NaN   \n","4  6845956   christopher   trombello    charlotte        28227        NaN   \n","\n","   name_suffix  age  gender  race  ethnic  street_address  city  state  \\\n","0          NaN  NaN     NaN   NaN     NaN             NaN   NaN    NaN   \n","1          NaN  NaN     NaN   NaN     NaN             NaN   NaN    NaN   \n","2          NaN  NaN     NaN   NaN     NaN             NaN   NaN    NaN   \n","3          NaN  NaN     NaN   NaN     NaN             NaN   NaN    NaN   \n","4          NaN  NaN     NaN   NaN     NaN             NaN   NaN    NaN   \n","\n","   zip_code  full_phone_num  birth_place  register_date  download_month  \n","0       NaN             NaN          NaN            NaN             NaN  \n","1       NaN             NaN          NaN            NaN             NaN  \n","2       NaN             NaN          NaN            NaN             NaN  \n","3       NaN             NaN          NaN            NaN             NaN  \n","4       NaN             NaN          NaN            NaN             NaN  "],"text/html":["\n","  <div id=\"df-e7fd7ab8-1993-407c-8d07-c8dc9bca91cd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rec_id</th>\n","      <th>voter_reg_num</th>\n","      <th>name_prefix</th>\n","      <th>first_name</th>\n","      <th>middle_name</th>\n","      <th>last_name</th>\n","      <th>name_suffix</th>\n","      <th>age</th>\n","      <th>gender</th>\n","      <th>race</th>\n","      <th>ethnic</th>\n","      <th>street_address</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip_code</th>\n","      <th>full_phone_num</th>\n","      <th>birth_place</th>\n","      <th>register_date</th>\n","      <th>download_month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4489635</td>\n","      <td>diana</td>\n","      <td>libberton</td>\n","      <td>hubert</td>\n","      <td>28539</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3597241</td>\n","      <td>lillie</td>\n","      <td>sullivan</td>\n","      <td>raleigh</td>\n","      <td>27606</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7621378</td>\n","      <td>sherlyn</td>\n","      <td>penado</td>\n","      <td>gastonia</td>\n","      <td>28056</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5029442</td>\n","      <td>theresa</td>\n","      <td>moore</td>\n","      <td>chocowinity</td>\n","      <td>27817</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6845956</td>\n","      <td>christopher</td>\n","      <td>trombello</td>\n","      <td>charlotte</td>\n","      <td>28227</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7fd7ab8-1993-407c-8d07-c8dc9bca91cd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e7fd7ab8-1993-407c-8d07-c8dc9bca91cd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e7fd7ab8-1993-407c-8d07-c8dc9bca91cd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":55}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3LOG8GkdvHU4"},"outputs":[],"source":["original_df = pd.concat([og_tab1, og_tab2, og_tab3, og_tab4])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eV60nLSXGhJ4"},"outputs":[],"source":["loop = 94\n","keep1 = list()\n","result = list()\n","for i in range(len(df_all_rows)):\n","  if df_all_rows.iloc[i, 3] == loop:\n","    keep1.append(int(df_all_rows.iloc[i, 0]))\n","for j in range(len(original_df)):\n","  if original_df.iloc[j, 0] in keep1:\n","    result.append(original_df.iloc[j, 0])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1667113181771,"user":{"displayName":"Johnson S. Grear Jr","userId":"08797184162084616032"},"user_tz":-660},"id":"Nfss0xaYJyNg","outputId":"4377244e-0d37-44ea-aacf-dc9e6b3dddfa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":152}],"source":["len(result)"]},{"cell_type":"code","source":["result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gy8nft9_ozfy","executionInfo":{"status":"ok","timestamp":1667113184012,"user_tz":-660,"elapsed":5,"user":{"displayName":"Johnson S. Grear Jr","userId":"08797184162084616032"}},"outputId":"2873f5e6-30cc-4a42-8e1e-bd97514dee62"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[7696253, 7696253, 7696253]"]},"metadata":{},"execution_count":153}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":378,"status":"ok","timestamp":1667113103395,"user":{"displayName":"Johnson S. Grear Jr","userId":"08797184162084616032"},"user_tz":-660},"id":"_yh7g50NGpHo","outputId":"41dffeed-a87e-4069-a6a1-6b7e87196510"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":139}],"source":["#unique value of each cluster created\n","result = set(result)\n","len(result)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XsNaBoeR-XKv"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"IUXy9Y2FmOQ2"},"source":["# Dont run"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IXoqMeBBoRLp"},"outputs":[],"source":["# test don't run\n","#wrongcount = 0\n","#keep1 = list()\n","#result = list()\n","#for i in range(counter_clus):\n","  #for k in range(len(df_all_rows)):\n","    #if df_all_rows.iloc[k, 3] == i:\n","      #keep1.append(int(df_all_rows.iloc[k, 0][1:]))\n","    #for j in range(len(original_df)):\n","      #if original_df.iloc[j, 0] in keep1:\n","        #result.append(original_df.iloc[j, 0])\n","    #myset = set(result)\n","    #if len(myset) > 1:\n","      #wrongcount += 1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AhlXLge1mMrD"},"outputs":[],"source":["#first method\n","#The code below aims to get the average of all binary record for each cluster id.(using binary addition and division) \n","max = cluster_map.iloc[len(cluster_map)-1, 0]\n","listexp = list()\n","loop = 0\n","averages = dict()\n","for i in range(max): \n","  for j in range(len(cluster_map)): #loop through the cluster_map table\n","      if cluster_map.iloc[j, 0] == loop: #identify a single cluster id and store it binary record in a temporary list\n","        listexp.append(cluster_map.iloc[j, 1])\n","  sum = \"0\"\n","  div = 0\n","  for k in range(len(listexp)): #loop through the list created\n","    flow = listexp[k].to01()\n","    sum = bin(int(sum, 2) + int(flow, 2)) # add all binary record in that list \n","    div += 1\n","    num = int(sum, 2) # devide the sum to get the average for each cluster id\n","  ans = bin(int(num/div))\n","  averages[loop] = ans[2:]\n","  loop += 1\n","\n","#second method \n","#second method - go find each cluster and find the average of the cluster \n","listexp = list()\n","averages = dict()\n","for i in range(counter_clus): \n","  for j in range(len(cluster_map)):       #loop through the cluster_map table\n","    if cluster_map.iloc[j, 0] == i:              #identify a single cluster id and store it binary record in a temporary list\n","      listexp.append(cluster_map.iloc[j, 1])\n","  res = list()\n","  for y in range(len(listexp[0])):\n","    tempList = list()\n","    for k in range(len(listexp)):\n","      flow = listexp[k].to01()\n","      tempList.append(int(flow[y]))\n","    res.append(round(mean(tempList), 6))\n","  averages[i] = res\n","\n","\n","keep = 0\n","score = 0\n","for k, v in rec_db4.items():\n","  store = v[0]+ v[1]+ v[2]+ v[3]\n","  val4_set = [store]\n","  bf4 = bf.set_to_bloom_filter(val4_set)\n","  \n","  for k1 in averages.keys():\n","    s = ''.join(str(x) for x in averages[k1])\n","    if bf.calc_str_sim(bf4.to01(), s) >= score:\n","      keep = k1\n","  cluster_map.loc[len(cluster_map)+1] = [keep, bf4] \n"]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}